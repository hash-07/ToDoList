{"version":3,"sources":["logo.svg","LIstCopm.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LIstCopm","props","useState","line","setLine","Fragment","className","onClick","style","textDecoration","text","ToDoList","item","setItem","newitem","setNewItem","type","value","placeholder","onChange","event","target","Button","Valux","map","val","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,0KCG5B,SAASC,EAASC,GAAQ,IAAD,EACfC,oBAAS,GADM,mBAChCC,EADgC,KAC1BC,EAD0B,KAQvC,OACA,kBAAC,IAAMC,SAAP,KACC,yBAAKC,UAAU,cACd,0BAAMC,QARM,WACbH,GAAQ,KAQP,kBAAC,IAAD,OAEC,wBAAII,MAAO,CAAEC,eAAiBN,EAAO,eAAiB,SAAUF,EAAMS,Q,mCCV3D,SAASC,IAAY,IAAD,EACVT,mBAAS,IADC,mBAC3BU,EAD2B,KACrBC,EADqB,OAEJX,mBAAS,IAFL,mBAE3BY,EAF2B,KAElBC,EAFkB,KAmBlC,OACD,kBAAC,IAAMV,SAAP,KACE,yBAAKC,UAAU,YACd,yBAAKA,UAAU,cACd,6BACC,4CACD,6BACG,2BAAOU,KAAK,OAAOC,MAAOL,EAAMM,YAAY,cAC5CC,SAvBY,SAACC,GAClBP,EAAQO,EAAMC,OAAOJ,UAuBb,kBAACK,EAAA,EAAD,CAAQhB,UAAU,SAClBC,QArBS,WACjBQ,GAAW,SAACQ,GACX,MAAM,GAAN,mBAAWA,GAAX,CAAiBX,OAGlBC,EAAQ,OAiBA,kBAAC,IAAD,OAGN,6BACE,4BAGGC,EAAQU,KAAI,SAACC,EAAIC,GAChB,OAAM,kBAAC1B,EAAD,CAAU2B,IAAKD,EAAOhB,KAAMe,WC/B7BG,MARf,WACE,OACE,6BACE,kBAACjB,EAAD,QCGckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.92c403cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport default function LIstCopm(props) {\r\n\tconst [line, setLine] = useState(false);\r\n\r\n\tconst CutIt = () => {\r\n\t\tsetLine(true);\r\n\t};\r\n\r\n\r\n\treturn ( \r\n\t<React.Fragment>\r\n\t\t<div className=\"todo_style\">\r\n\t\t\t<span onClick={CutIt}>\r\n\t\t\t<DeleteIcon/>\r\n\t\t\t</span>\r\n\t\t\t <li style={{ textDecoration : line ? 'line-through' : 'none'}}>{props.text}</li>\r\n\t\t</div>\r\n\t</React.Fragment>\r\n\t)\r\n}","import React, {useState} from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport LIstCopm from './LIstCopm';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Style from './Style.css'\r\n\r\nexport default function ToDoList() {\r\n\tconst [item, setItem] = useState(\"\");\r\n\tconst [newitem, setNewItem] = useState([]);\r\n\r\n\tconst itemEvent = (event) => {\r\n\t\tsetItem(event.target.value);\r\n\t}\r\n\r\n\tconst InputData = () =>{\r\n\t\tsetNewItem((Valux)=>{\r\n\t\t\treturn [...Valux,item]\r\n\t\t\t\r\n\t\t})\r\n\t\tsetItem(\" \");\r\n\t}\r\n\r\n\r\n\r\n\r\n\treturn (\r\n<React.Fragment>\r\n\t\t<div className=\"main_div\">\r\n\t\t\t<div className=\"center_div\">\r\n\t\t\t\t<br/>\r\n\t\t\t\t\t<h1> To Do List </h1>\r\n\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<input type=\"text\" value={item} placeholder=\"Add an item\"\r\n\t\t\t\t\t\t\tonChange={itemEvent}/>\r\n\t\t\t\t\t\t\t\t\t\t<Button className=\"newBtn\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={InputData}>\r\n\t\t\t\t\t\t\t\t\t\t<AddIcon/>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t<br/>\r\n\t\t\t\t\t\t<ol>\r\n\t\t\t\t\t\t \t\r\n\t\t\t\t\t\t \t{\r\n\t\t\t\t\t\t \t\tnewitem.map((val,index)=> {\r\n\t\t\t\t\t\t \t\t\treturn<LIstCopm key={index} text={val}/>\r\n\t\t\t\t\t\t \t\t}\r\n\t\t\t\t\t\t \t)}\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t</ol>\r\n\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n</React.Fragment>\r\n\t)\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ToDoList from './ToDoList'\n\n\nfunction App() {\n  return (\n    <div>\n      <ToDoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}